[{"/Users/annika/wild-code-school/hackathon-2/hackathon-2/src/index.js":"1","/Users/annika/wild-code-school/hackathon-2/hackathon-2/src/App.js":"2","/Users/annika/wild-code-school/hackathon-2/hackathon-2/src/reportWebVitals.js":"3","/Users/annika/wild-code-school/hackathon-2/hackathon-2/src/components/Table/Table.js":"4","/Users/annika/wild-code-school/hackathon-2/hackathon-2/src/components/Login.js":"5"},{"size":500,"mtime":1611070642282,"results":"6","hashOfConfig":"7"},{"size":818,"mtime":1611222255784,"results":"8","hashOfConfig":"7"},{"size":362,"mtime":1611070642282,"results":"9","hashOfConfig":"7"},{"size":4042,"mtime":1611226637795,"results":"10","hashOfConfig":"7"},{"size":1298,"mtime":1611225222451,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"1nv5wht",{"filePath":"15","messages":"16","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17","usedDeprecatedRules":"14"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22","usedDeprecatedRules":"14"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25"},"/Users/annika/wild-code-school/hackathon-2/hackathon-2/src/index.js",[],["26","27"],"/Users/annika/wild-code-school/hackathon-2/hackathon-2/src/App.js",["28"],"import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport Table from \"./components/Table/Table\";\nimport Login from \"./components/Login\";\nimport { BrowserRouter, Route, Switch, Router } from \"react-router-dom\";\n\n\nfunction App() {\n  const [empolyees, setEmployees] = useState([]);\n\n  useEffect(() => {\n    fetch(\"https://my.api.mockaroo.com/employees?key=e1692940\")\n      .then((response) => response.json())\n      .then((data) => setEmployees(data));\n  }, []);\n\n  console.log(\"fake data u there?\", empolyees);\n  return (\n    <div>\n      <BrowserRouter>\n        <Switch>\n          <Route exact path=\"/login\" component={Login} />\n        </Switch>\n        <Switch>\n          <Route exact path=\"/\" component={Table} />\n        </Switch>\n        </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n","/Users/annika/wild-code-school/hackathon-2/hackathon-2/src/reportWebVitals.js",[],"/Users/annika/wild-code-school/hackathon-2/hackathon-2/src/components/Table/Table.js",["29"],"import React, { useState, useEffect } from \"react\";\nimport { forwardRef } from \"react\";\nimport MaterialTable from \"material-table\";\nimport Search from \"@material-ui/icons/Search\";\nimport AddBox from \"@material-ui/icons/AddBox\";\nimport { FormatAlignCenter } from \"@material-ui/icons\";\nimport styled from \"styled-components\";\n\n//Styled components\n\nconst TableDiv = styled.div`\n  display: flex;\n  align-items: center;\n`;\n\nfunction Table(props) {\n  const [empolyees, setEmployees] = useState([]);\n  const [data, setData] = useState(0);\n\n  const tableIcons = {\n    Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\n    Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\n  };\n\n  useEffect(() => {\n    fetch(\"https://my.api.mockaroo.com/employees?key=e1692940\")\n      .then((response) => response.json())\n      .then((data) => setEmployees(data));\n  }, []);\n\n  console.log(\"fake data u there?\", empolyees);\n  return (\n    <TableDiv style={{ maxWidth: \"90%\" }}>\n      <MaterialTable\n        icons={tableIcons}\n        columns={[\n          { title: \"Name\", field: \"name\" },\n          { title: \"E-mail\", field: \"email\" },\n          { title: \"Position\", field: \"position\" },\n          { title: \"Education\", field: \"education\" },\n          { title: \"Former Employers\", field: \"former_employers\" },\n          {\n            title: \"Experience in field\",\n            field: \"experience_in_the_trade\",\n          },\n          { title: \"Special Knowledge\", field: \"special_knowledge\" },\n          { title: \"Hobbies\", field: \"hobbies\" },\n          { title: \"Network Connections\", field: \"\" },\n          { title: \"Special Skills\", field: \"skills\" },\n          { title: \"Languages\", field: \"languages\" },\n          { title: \"Software Skills\", field: \"software_skills\" },\n          { title: \"Talents\", field: \"talents\" },\n          { title: \"Customers\", field: \"customers\" },\n          { title: \"Projects\", field: \"projects\" },\n          { title: \"Further Training\", field: \"further_training\" },\n        ]}\n        data={empolyees}\n        actions={[\n          {\n            icon: \"save\",\n            tooltip: \"Save User\",\n            onClick: (event, rowData) => {\n              // Do save operation\n            },\n          },\n        ]}\n        editable={{\n          isEditable: (rowData) => rowData.name === \"a\", // only name(a) rows would be editable\n          isEditHidden: (rowData) => rowData.name === \"x\",\n          isDeletable: (rowData) => rowData.name === \"b\", // only name(b) rows would be deletable,\n          isDeleteHidden: (rowData) => rowData.name === \"y\",\n          onBulkUpdate: (changes) =>\n            new Promise((resolve, reject) => {\n              setTimeout(() => {\n                /* setData([...data, newData]); */\n\n                resolve();\n              }, 1000);\n            }),\n          onRowAddCancelled: (rowData) => console.log(\"Row adding cancelled\"),\n          onRowUpdateCancelled: (rowData) =>\n            console.log(\"Row editing cancelled\"),\n          onRowAdd: (newData) =>\n            new Promise((resolve, reject) => {\n              setTimeout(() => {\n                /* setData([...data, newData]); */\n\n                resolve();\n              }, 1000);\n            }),\n          onRowUpdate: (newData, oldData) =>\n            new Promise((resolve, reject) => {\n              setTimeout(() => {\n                const dataUpdate = [...data];\n                const index = oldData.tableData.id;\n                dataUpdate[index] = newData;\n                setData([...dataUpdate]);\n\n                resolve();\n              }, 1000);\n            }),\n          onRowDelete: (oldData) =>\n            new Promise((resolve, reject) => {\n              setTimeout(() => {\n                const dataDelete = [...data];\n                const index = oldData.tableData.id;\n                dataDelete.splice(index, 1);\n                setData([...dataDelete]);\n\n                resolve();\n              }, 1000);\n            }),\n        }}\n      />\n    </TableDiv>\n  );\n}\n\nexport default Table;\n","/Users/annika/wild-code-school/hackathon-2/hackathon-2/src/components/Login.js",["30","31","32","33","34","35","36","37"],"import React, { useState } from \"react\";\nimport { Link, Redirect } from \"react-router-dom\";\n\n// import { postDataToPath } from \"../../utils/api\";\n\nexport default function Login() {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [message, setMessage] = useState(\"\");\n  const [user, setUser] = useState(undefined);\n\n//   const handleSubmit = async (evt) => {\n//     evt.preventDefault();\n//     setMessage(\"\");\n//     const response = await postDataToPath(\"/api/auth/login\", { email, password });\n//     if (response.error) {\n//       setMessage(response.error);\n//     } else {\n//       setTimeout(() => {\n//         setUser(response);\n//       }, 2000);\n\n//       setMessage(\"\");\n//     }\n//   };\n\n//   if (user) {\n//     return <Redirect to={\"/user/dashboard\"} />;\n//   }\n\n  return (\n    <div>\n    <div className = \"login\">\n        <strong>Welcome!</strong>\n      <input saveInput={setEmail} placeholder=\"Email\" type=\"text\" />\n      <input\n        saveInput={setPassword}\n        placeholder=\"Password\"\n        type=\"password\"\n      />\n      <img src=\"/Users/annika/wild-code-school/hackathon-2/hackathon-2/images/login.png\" alt=\"login-button\" />\n    </div>\n    <div>\n    <img src=\"../images/login.png\" alt=\"Login\" />\n    </div>\n    </div>\n  );\n}",{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","replacedBy":"41"},{"ruleId":"42","severity":1,"message":"43","line":5,"column":40,"nodeType":"44","messageId":"45","endLine":5,"endColumn":46},{"ruleId":"42","severity":1,"message":"46","line":6,"column":10,"nodeType":"44","messageId":"45","endLine":6,"endColumn":27},{"ruleId":"42","severity":1,"message":"47","line":2,"column":10,"nodeType":"44","messageId":"45","endLine":2,"endColumn":14},{"ruleId":"42","severity":1,"message":"48","line":2,"column":16,"nodeType":"44","messageId":"45","endLine":2,"endColumn":24},{"ruleId":"42","severity":1,"message":"49","line":7,"column":10,"nodeType":"44","messageId":"45","endLine":7,"endColumn":15},{"ruleId":"42","severity":1,"message":"50","line":8,"column":10,"nodeType":"44","messageId":"45","endLine":8,"endColumn":18},{"ruleId":"42","severity":1,"message":"51","line":9,"column":10,"nodeType":"44","messageId":"45","endLine":9,"endColumn":17},{"ruleId":"42","severity":1,"message":"52","line":9,"column":19,"nodeType":"44","messageId":"45","endLine":9,"endColumn":29},{"ruleId":"42","severity":1,"message":"53","line":10,"column":10,"nodeType":"44","messageId":"45","endLine":10,"endColumn":14},{"ruleId":"42","severity":1,"message":"54","line":10,"column":16,"nodeType":"44","messageId":"45","endLine":10,"endColumn":23},"no-native-reassign",["55"],"no-negated-in-lhs",["56"],"no-unused-vars","'Router' is defined but never used.","Identifier","unusedVar","'FormatAlignCenter' is defined but never used.","'Link' is defined but never used.","'Redirect' is defined but never used.","'email' is assigned a value but never used.","'password' is assigned a value but never used.","'message' is assigned a value but never used.","'setMessage' is assigned a value but never used.","'user' is assigned a value but never used.","'setUser' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]